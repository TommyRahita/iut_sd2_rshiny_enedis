corrélation <- cor(x=df$Surface_habitable_logement , y=df$Coût_chauffage)
corrélation <- cor(x=df$Surface_habitable_logement , y=df$Coût_chauffage)
corrélation
corrélation <- cor(x=df$Surface_habitable_logement , y=df$Coût_chauffage, method = "spearman")
corrélation
cor(x=df$Surface_habitable_logement , y=df$Coût_chauffage, method = "spearman")
cor(x=df$Surface_habitable_logement , y=df$Coût_chauffage, method = "spearman")
head(df)
install.packages('corrplot')
library('corrplot')
head(df)
M <- cor(df$Coût_total_5_usages,df$Coût_chauffage,df$Coût_éclairage,df$Coût_ECS,df$Coût_refroidissement, df$Coût_auxiliaires, df$Surface_habitable_logement , df$Emission_GES_5_usages)
M <- cor(df)
head(mtcars)
M <- cor(df)
M <- cor(c(df$Coût_total_5_usages,df$Coût_chauffage,df$Coût_éclairage,df$Coût_ECS,df$Coût_refroidissement, df$Coût_auxiliaires, df$Surface_habitable_logement , df$Emission_GES_5_usages))
M <- cor(cbind(df$Coût_total_5_usages,df$Coût_chauffage,df$Coût_éclairage,df$Coût_ECS,df$Coût_refroidissement, df$Coût_auxiliaires, df$Surface_habitable_logement , df$Emission_GES_5_usages))
head(round(M,2))
corrplot(M,method="circle")
M <- cor(cbind(df$Coût_total_5_usages,df$Coût_chauffage,df$Coût_éclairage,df$Coût_ECS,df$Coût_refroidissement, df$Coût_auxiliaires, df$Surface_habitable_logement , df$Emission_GES_5_usages))
corrplot(M,method="circle")
M <- cor(cbind(df$Coût_total_5_usages,df$Coût_chauffage,df$Coût_éclairage,df$Coût_ECS,df$Coût_refroidissement, df$Coût_auxiliaires, df$Surface_habitable_logement , df$Emission_GES_5_usages))
head(round(M,2))
corrplot(M,method="circle")
colnames(df)
filter(df,Type_bâtiment = "appartement" )
filter(df,Type_bâtiment == "appartement" )
filter(df,df$Type_bâtiment == "appartement" )
appartements <- filter(df,df$Type_bâtiment == "appartement" )
appartements
print(appartement)
print(appartements)
appartements <- filter(df,Type_bâtiment == "appartement" )
print(df$Type_bâtiment)
appartements <- filter(df,Type_bâtiment == "appartement" )
typeof(df)
dataframe -> as.data.frame(df)
dataframe <- as.data.frame(df)
appartements <- filter(dataframe,Type_bâtiment == "appartement" )
View(df)
View(dataframe)
appartements <- filter(dataframe,Type_batiment == "appartement" )
colnames(dataframe)
appartements <- filter(dataframe,Type_bâtiment == "appartement" )
appartements <- filter(df,df$Type_bâtiment == "appartement" )
print(appartements)
appartements <- filter(dd,17 == "appartement" )
appartements <- filter(df,17 == "appartement" )
print(appartements)
appartements <- filter(df, Etiquette_DPE == "A" )
appartements <- filter(df, df$Etiquette_DPE == "A" )
print(appartements)
etiquette_DPE <- filter(df, df$Etiquette_DPE == "D" || df$Etiquette_DPE == "E" || df$Etiquette_DPE == "F" || df$Etiquette_DPE == "G")
df %>% filter(df$Etiquette_DPE == "D" || df$Etiquette_DPE == "E" || df$Etiquette_DPE == "F" || df$Etiquette_DPE == "G")
filter(df$Etiquette_DPE == "D" || df$Etiquette_DPE == "E" || df$Etiquette_DPE == "F" || df$Etiquette_DPE == "G")
appartements <- Filter(df,Type_bâtiment == "appartement")
appartements <- Filter(dataframe,Type_bâtiment == "appartement")
appartements <- filter(dataframe,Type_bâtiment == "appartement")
colnames(df)
colnames(df) <- make.names(colnames(df), unique = TRUE)
colnames(df)
appartements <- filter(dataframe,Type_bâtiment == "appartement")
appartements <- filter(dataframe,'Type_bâtiment' == "appartement")
print(appartements)
appartements <- filter(df,'Type_bâtiment' == "appartement")
print(appartements)
etiquette_DPE <- filter(df,'Etiquette_DPE' == "D,E,F,G")
print(etiquette_DPE)
etiquette_DPE <- filter(df,'Etiquette_DPE' == "D" |'Etiquette_DPE' == "E" | 'Etiquette_DPE' == "F" | 'Etiquette_DPE' == "G" )
print(etiquette_DPE)
colnames(df)
avant_1960 <- filter(df,'Periode_construction' == "Avant 1960")
print(avant_1960)
appartements <- filter(data=df,'Type_bâtiment' == "appartement")
etiquette_DPE <- filter(data=df,'Etiquette_DPE' == "D" |'Etiquette_DPE' == "E" | 'Etiquette_DPE' == "F" | 'Etiquette_DPE' == "G" )
df_trie <- arrage(df,desc(Conso_5_usages.m._é_finale))
df_trie <- arrange(df,desc(Conso_5_usages.m._é_finale))
df_trie <- arrange(df,desc('Conso_5_usages.m._é_finale'))
install.packages('dyplyr')
library('dplyr')
df_trie <- arrange(df,desc('Conso_5_usages.m._é_finale'))
print(df_trie)
avant_1960 <- filter(df,'Periode_construction' == "Avant 1960")
print(avant_1960)
appartements <- filter(df,'Type_bâtiment' == "appartement")
print(appartements)
#2
etiquette_DPE <- filter(df,'Etiquette_DPE' == "D" |'Etiquette_DPE' == "E" | 'Etiquette_DPE' == "F" | 'Etiquette_DPE' == "G" )
print(etiquette_DPE)
df_trie1 <- arrange(df,Etiquette_DPE,Periode_construction,desc(Coût_chauffage))
print(df_trie1)
cout_moyen_etiquette <- aggregate(Coût_chauffage~etiquette_DPE,df, FUN = mean)
cout_moyen_etiquette <- aggregate(Coût_chauffage~Etiquette_DPE,df, FUN = mean)
print(cout_moyen_etiquette)
# Exo 2
# 1.
# La population est l'ensemble d'étudiants.
# Les échantillons sont les garçons et les filles
# La variable est une longueur en cm, elle
# est quantitative continue.
# 2.
garçons <- c(9.2,9.6,9.7,9.7,9.8,10.5,10.5,10.5,11.5,12.4,13.2,13.7)
filles <- c(10.4,10.5,10.8,11.1,11.8,12.9,13.2,13.4,14.2,14.5)
moy_g = mean(garçons)
moy_f = mean(filles)
alpha = 0.05
n_g = length(garçons)
n_f = length(filles)
# a)
IC_g_gauche = moy_g - qnorm(1-alpha/2)*sqrt(2.20)/sqrt(n_g)
IC_g_droite = moy_g + qnorm(1-alpha/2)*sqrt(2.20)/sqrt(n_g)
IC_g_gauche
IC_g_droite
IC_f_gauche = moy_f - qnorm(1-alpha/2)*Sigma_f/sqrt(n_f)
Sigma_f = sqrt(2.4)
IC_f_gauche = moy_f - qnorm(1-alpha/2)*Sigma_f/sqrt(n_f)
IC_f_droite = moy_f + qnorm(1-alpha/2)*Sigma_f/sqrt(n_f)
IC_f_gauche
IC_f_droite
# On a donc un
# Exo 2
# 1.
# La population est l'ensemble d'étudiants.
# Les échantillons sont les garçons et les filles
# La variable est une longueur en cm, elle
# est quantitative continue.
# 2.
garçons <- c(9.2,9.6,9.7,9.7,9.8,10.5,10.5,10.5,11.5,12.4,13.2,13.7)
filles <- c(10.4,10.5,10.8,11.1,11.8,12.9,13.2,13.4,14.2,14.5)
moy_g = mean(garçons)
moy_f = mean(filles)
alpha = 0.05
n_g = length(garçons)
n_f = length(filles)
Sigma_g = sqrt(2.2)
Sigma_f = sqrt(2.4)
# a)
IC_g_gauche = moy_g - qnorm(1-alpha/2)*Sigma_g/sqrt(n_g)
IC_g_droite = moy_g + qnorm(1-alpha/2)*Sigma_g/sqrt(n_g)
IC_g_gauche
IC_g_droite
# On a donc un IC pour moy_g =
# IC = ] 10.01913 ; 11.69754 [
IC_f_gauche = moy_f - qnorm(1-alpha/2)*Sigma_f/sqrt(n_f)
IC_f_droite = moy_f + qnorm(1-alpha/2)*Sigma_f/sqrt(n_f)
IC_f_gauche
IC_f_droite
# On a donc un IC pour moy_f =
# IC = ] 11.31982 ; 13.24018 [
diff_moy = moy_g - moy_f
alpha1 = 0.1
IC_gf_gauche = diff_moy - qnorm(1-alpha1/2)*sqrt(2.2/n_g+2.4/n_f)
IC_gf_droite = diff_moy - qnorm(1-alpha1/2)*sqrt(2.2/n_g+2.4/n_f)
IC_gf_gauche
IC_gf_droite
diff_moy = moy_g - moy_f
alpha1 = 0.1
IC_gf_gauche = diff_moy - qnorm(1-alpha1/2)*sqrt(2.2/n_g+2.4/n_f)
IC_gf_droite = diff_moy + qnorm(1-alpha1/2)*sqrt(2.2/n_g+2.4/n_f)
IC_gf_gauche
IC_gf_droite
moy_g
moy_f
diff_moy
t.test(garçons,conf.level = 0.95)$conf.int
t.test(filles,conf.level = 0.95)$conf.int #
t.test(garçons,conf.level = 0.95, var.equal=T)$conf.int # 9.902987 11.813679
t.test(filles,conf.level = 0.95, var.equal=T)$conf.int # 11.17136 13.38864
install.packages("EnvStats")
library("EnvStats")
varTest(garçons,conf.level=0.95)$conf.int #
varTest(filles,conf.level = 0.95)$conf.int
p_g = filter(garçons>13&&garçons<11)
garçons_filtre = garçons[garçons>13&&garçons<11]
garçons_filtre = garçons[garçons>13,garçons<11]
garçons_filtre = garçons[garçons>13]
garçons_filtre
garçons_filtre = garçons[garçons>13 & garcons<11]
garçons_filtre = garçons[garçons>13 & garçons<11]
garçons_filtre
garçons_filtre <- garçons[garçons>13 & garçons<11]
garçons_filtre
print[garçons_filtre]
garçons_filtre
garçons_filtre
print(garçons_filtre)
garçons_filtre <- garçons[garçons>13 & garçons<11]
garçons_filtre <- garçons[garçons>13 || garçons<11]
garçons_filtre <- garçons[garçons>13 | garçons<11]
print(garçons_filtre)
filles_filtre <- filles[filles>13 | filles<11]
print(filles_filtre)
p_g = garçons_filtre/n_g
p_f = filles_filtre/n_f
p_g
p_f
p_g = length(garçons_filtre)/n_g
p_f = length(filles_filtre)/n_f
p_g
p_f
(garçon>13)
(garçons>13)
ICp_g_gauche = p_g - qnorm(1-alpha/2) * sqrt(p_g(1-p_g)/n_g)
ICp_g_gauche = p_g - qnorm(1-alpha/2) * sqrt(p_g*(1-p_g)/n_g)
ICp_g_droite = p_g + qnorm(1-alpha/2) * sqrt(p_g*(1-p_g)/n_g)
ICp_f_gauche = p_f - qnorm(1-alpha/2) * sqrt(p_f*(1-p_f)/n_f)
ICp_f_droite = p_f + qnorm(1-alpha/2) * sqrt(p_f*(1-p_f)/n_f)
ICp_g_gauche
ICp_g_droite
ICp_f_gauche
ICp_f_droite
install.packages('epitools')
library('epitools')
#première fonction(Méthode 1)
prop.test(n_g*p_g,n_g,conf.level=0.95)$conf.int
Borne_gauche_d_prop=(p_g-p_f)-(1-alpha1/2)*sqrt((p_g*(1-p_g)/n_g)+(p_f*(1-p_f)/n_f))
Borne_droite_d_prop=(p_g-p_f)+(1-alpha1/2)*sqrt((p_g*(1-p_g)/n_g)+(p_f*(1-p_f)/n_f))
Borne_gauche_d_prop;Borne_droite_d_prop
diff_prop <- p_g-p_f
diff_prop
# Exo 2
# 1.
# La population est l'ensemble d'étudiants.
# Les échantillons sont les garçons et les filles
# La variable est une longueur en cm, elle
# est quantitative continue.
# 2.
garçons <- c(9.2,9.6,9.7,9.7,9.8,10.5,10.5,10.5,11.5,12.4,13.2,13.7)
filles <- c(10.4,10.5,10.8,11.1,11.8,12.9,13.2,13.4,14.2,14.5)
moy_g = mean(garçons)
moy_f = mean(filles)
alpha = 0.05
n_g = length(garçons)
n_f = length(filles)
Sigma_g = sqrt(2.2)
Sigma_f = sqrt(2.4)
# a)
IC_g_gauche = moy_g - qnorm(1-alpha/2)*Sigma_g/sqrt(n_g)
IC_g_droite = moy_g + qnorm(1-alpha/2)*Sigma_g/sqrt(n_g)
IC_g_gauche
IC_g_droite
# On a donc un IC pour moy_g =
# IC = ] 10.01913 ; 11.69754 [
IC_f_gauche = moy_f - qnorm(1-alpha/2)*Sigma_f/sqrt(n_f)
IC_f_droite = moy_f + qnorm(1-alpha/2)*Sigma_f/sqrt(n_f)
IC_f_gauche
IC_f_droite
# On a donc un IC pour moy_f =
# IC = ] 11.31982 ; 13.24018 [
# b)
diff_moy = moy_g - moy_f
alpha1 = 0.1
IC_gf_gauche = diff_moy - qnorm(1-alpha1/2)*sqrt(2.2/n_g+2.4/n_f)
IC_gf_droite = diff_moy + qnorm(1-alpha1/2)*sqrt(2.2/n_g+2.4/n_f)
IC_gf_gauche
IC_gf_droite
# On a donc un IC pour la différence des moyennes =
# IC = ] -2.491875 ; -0.3514579 [
# c)
moy_g  # = 10.85833
moy_f  # = 12.28
diff_moy # = -1.421667
# On peut considérer avec un rique de 10 % que
# les garçons fournissent en moyenne un segment
# plus petit de 1.42 cm que les filles.
# 3.
t.test(garçons,conf.level = 0.95, var.equal=T)$conf.int # 9.902987 11.813679
t.test(filles,conf.level = 0.95, var.equal=T)$conf.int # 11.17136 13.38864
# 4.
install.packages("EnvStats")
library("EnvStats")
varTest(garçons,conf.level=0.95)$conf.int # 1.134540 6.517507
varTest(filles,conf.level = 0.95)$conf.int # 1.136323 8.004771
# 5.
# a)
garçons_filtre <- garçons[garçons>13 | garçons<11]
print(garçons_filtre)
filles_filtre <- filles[filles>13 | filles<11]
print(filles_filtre)
# proportions
p_g = length(garçons_filtre)/n_g
p_f = length(filles_filtre)/n_f
p_g
p_f
# b)
ICp_g_gauche = p_g - qnorm(1-alpha/2) * sqrt(p_g*(1-p_g)/n_g)
ICp_g_droite = p_g + qnorm(1-alpha/2) * sqrt(p_g*(1-p_g)/n_g)
ICp_f_gauche = p_f - qnorm(1-alpha/2) * sqrt(p_f*(1-p_f)/n_f)
ICp_f_droite = p_f + qnorm(1-alpha/2) * sqrt(p_f*(1-p_f)/n_f)
ICp_g_gauche
ICp_g_droite
# ICproportion_garçcons = ] 0.6224748 ; 1.044192 [
ICp_f_gauche
ICp_f_droite
# ICproportion_filles = ] 0.4159742 ; 0.9840258 [
install.packages('epitools')
library('epitools')
#première fonction(Méthode 1)
prop.test(n_g*p_g,n_g,conf.level=0.95)$conf.int
# 0.5088142 0.9705909
# c)
diff_prop <- p_g-p_f
diff_prop # = 0.1333333
Borne_gauche_d_prop=(p_g-p_f)-(1-alpha1/2)*sqrt((p_g*(1-p_g)/n_g)+(p_f*(1-p_f)/n_f))
Borne_droite_d_prop=(p_g-p_f)+(1-alpha1/2)*sqrt((p_g*(1-p_g)/n_g)+(p_f*(1-p_f)/n_f))
Borne_gauche_d_prop;Borne_droite_d_prop
# ] -0.03812541 ; 0.3047921 [
#
IC_g_gauche = moy_g - qnorm(1-alpha/2)*Sigma_g/sqrt(n_g)
IC_g_droite = moy_g + qnorm(1-alpha/2)*Sigma_g/sqrt(n_g)
IC_g_gauche
IC_g_droite
t.test(garçons,alternative = "t" , mu=moy_g)
Borne_gauche_d_prop=(p_g-p_f)-qnorm(1-alpha1/2)*sqrt((p_g*(1-p_g)/n_g)+(p_f*(1-p_f)/n_f))
Borne_droite_d_prop=(p_g-p_f)+qnorm(1-alpha1/2)*sqrt((p_g*(1-p_g)/n_g)+(p_f*(1-p_f)/n_f))
Borne_gauche_d_prop;Borne_droite_d_prop
Borne_gauche_d_prop=(p_g-p_f)-qnorm(1-alpha1/2)*sqrt((p_g*(1-p_g)/n_g)+(p_f*(1-p_f)/n_f))
Borne_droite_d_prop=(p_g-p_f)+qnorm(1-alpha1/2)*sqrt((p_g*(1-p_g)/n_g)+(p_f*(1-p_f)/n_f))
Borne_gauche_d_prop;Borne_droite_d_prop
# Exercice 1
# Contexte statistique
# On a deux échantillons dont les caractéristiques sont
# les suivantes :
n1 = 26 # Effectifs
n2 = 53
x1 = 3.7 # Moyennes
x2 = 3.2
s1 = 1.9 # Ecarts-type
s2 = 1.7
# 1.
# On suppose que la distribution suit une loi normale (gaussienne)
# H0 : "Sigma1=Sigma2" vs H1 : "Sigma1#Sigma2"
alpha = 0.05
# Méthode 1
s1etoile=sqrt(n1/(n1-1))*s1
s2etoile=sqrt(n2/(n2-1))*s2
f = s1etoile^2/s2etoile^2;f
borne_gauche =-qf(1-alpha/2,n1-1,n2-1)
borne_droite =qf(1-alpha/2,n1-1,n2-1)
borne_gauche; borne_droite
#On ne rejette pas H0 car appartient à l'intervalle.
#Conclusion : avec une probalitée  95% on peut considérer
# que les deux variances sont égales.
#Méthode 2
pvaleur = pf(s2etoile^2/s1etoile^2,n2-1,n1-1,lower.tail = T)+
pf(s1etoile^2/s2etoile^2,n1-1,n2-1,lower.tail = F)
pvaleur
# 2.
# ATTENTION : n1 < 30 et les variances sont égales
# H0 : "x1=x2" vs H1 :"x1#x2"
sprime2 = ((n1-1)*s1etoile^2 + (n2-1)*s2etoile^2)/(n1+n2-2)
sprime = sqrt(sprime2)
sprime
borne_gauche1 = -qt(1-alpha/2,n1+n2-2)*sprime*sqrt(1/n1+1/n2)
borne_droite1 = qt(1-alpha/2,n1+n2-2)*sprime*sqrt(1/n1+1/n2)
borne_gauche1;borne_droite1
x1-x2 # = 0.5 appartient donc on ne rejette pas H0
#Conclusion : Avec une proba de 95% on ne peut pas dire qu’il y a une difference sur le nombre
#moyen de journaux achetes par semaine entre les editions 1 et 2
# 3.
library('pwr')
pvaleur1=2*pt(abs(x1-x2)/sqrt(sprime*(1/n1+1/n2)),n1+n2-2,lower.tail = F)
pvaleur1
puissance = pwr.t2n.test(n1,n2,d=abs(x1-x2)/sprime,sig.level = alpha,power=NULL
,alternative = "two.sided")
puissance
# Puisque on a pas rejeté H0 on a une puissance faible
# Donc on a eu raison
# Exercice 2
# 1.
View(Autos)
# H0 : "mu (MOY-SUPER) = mu(MOY-INFER)" vs H1 :"mu (MOY-SUPER) # mu(MOY-INFER)
A1=Autos[Autos$gamme=='MOY-SUPER','co2']
borne_gauche; borne_droite
pvaleur = pf(s2etoile^2/s1etoile^2,n2-1,n1-1,lower.tail = T)+
pf(s1etoile^2/s2etoile^2,n1-1,n2-1,lower.tail = F)
pvaleur
shiny::runApp('BUT2/R shiny/R shiny/Rshiny')
shiny::runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
packageVersion("shiny")
# Vérifier la version de bslib
packageVersion("bslib")
update.packages()
runApp('BUT2/R shiny/R shiny/Rshiny')
update.packages()
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
remove.packages("gtable")
# Reinstall the package
install.packages("gtable")
install.packages("gtable")
shiny::runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
## Fonctionnalités
- **Authentification** : Sécurisée via nom d'utilisateur et mot de passe.
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
input$x_axis
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/app-test-gpt2')
runApp('BUT2/VersionYannick/app-test-gpt2/app')
runApp('BUT2/VersionYannick/app-test-gpt2')
runApp('BUT2/VersionYannick/app-test-gpt2')
runApp('BUT2/VersionYannick/app-test-gpt2')
runApp('BUT2/VersionYannick/app-test-gpt2')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/app-test-gpt2')
shiny::runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
runApp('BUT2/R shiny/R shiny/Rshiny')
shiny::runApp('BUT2/VersionYannick/app-test-gpt2/app')
setwd("~/BUT2/VersionYannick/app-test-gpt2/app")
runApp()
library(shinyjs)
runApp()
runApp()
runApp()
setwd("~/BUT2/R shiny/R shiny/Rshiny")
runApp()
runApp()
df_filtered <- read.csv("data/df_filtered.csv")
View(df_filtered)
View(df_filtered)
runApp()
runApp()
df_filtered <- read.csv("app/les df/df_filtered2.csv", header = TRUE, dec = ".", sep = ",")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_conso_cout <- read.csv("data/df_conso_cout.csv", header = TRUE, dec = ".", sep = ",")
View(df_conso_cout)
View(df_conso_cout)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
